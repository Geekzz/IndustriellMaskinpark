@page "/devices/create"
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IDeviceService DeviceService

<PageTitle>Create</PageTitle>

<div class="container mt-5">
    <h1 class="text-center mb-4">Create Device</h1>
    <div class="d-flex justify-content-center">
        <div class="card shadow-sm" style="width: 35rem;">
            <div class="card-header text-center bg-primary text-white">
                <h4>New Device Details</h4>
            </div>
            <div class="card-body">
                <EditForm method="post" Model="Device" OnValidSubmit="AddDevice" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="mb-3">
                        <label for="location" class="form-label">Location:</label>
                        <InputText id="location" @bind-Value="Device.Location" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Device.Location" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="lastupdated" class="form-label">Last Updated:</label>
                        <InputDate id="lastupdated" @bind-Value="Device.LastUpdated" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Device.LastUpdated" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="type" class="form-label">Type:</label>
                        <InputSelect id="type" @bind-Value="Device.Type" class="form-control" aria-required="true">
                            @foreach (var type in Enum.GetValues<DeviceType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Device.Type" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="status" class="form-label">Status:</label>
                        <InputSelect id="status" @bind-Value="Device.Status" class="form-control" aria-required="true">
                            @foreach (var status in Enum.GetValues<DeviceStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Device.Status" class="text-danger" />
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-primary">Create</button>
                        <a href="/devices" class="btn btn-secondary ms-2">Back</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Device Device { get; set; } = new Device
        {
            Location = string.Empty, // Default value to satisfy the required attribute
            LastUpdated = DateTime.Now // Optional: Set default for LastUpdated
        };


    private async Task AddDevice()
    {
        Console.WriteLine($"Before Create: Location={Device!.Location}, LastUpdated={Device.LastUpdated}, Type={Device.Type}, Status={Device.Status}");
        await DeviceService.AddDeviceAsync(Device); // Using DeviceService to add the device
        NavigationManager.NavigateTo("/devices");
    }
}
