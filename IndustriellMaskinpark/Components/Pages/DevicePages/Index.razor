@page "/devices"
@using Microsoft.EntityFrameworkCore
@using IndustriellMaskinpark.Data
@inject IDbContextFactory<IndustriellMaskinpark.Data.ApplicationDbContext> DbFactory
@implements IAsyncDisposable

<PageTitle>Dashboard</PageTitle>

<h1 class="text-center mb-4">Dashboard</h1>

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>

<div class="container">
    <!-- Card for Devices -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Device List</h5>
            <a href="/devices/create" class="btn btn-primary">Create New</a>
        </div>
        <div class="card-body">
            @if (Devices is null || !Devices.Any())
            {
                <p class="text-center">No devices available.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Device Id</th>
                                <th>Location</th>
                                <th>Last Updated</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var device in Devices)
                            {
                                <DeviceRow Id="@device.Id"
                                           Location="@device.Location"
                                           LastUpdated="@device.LastUpdated"
                                           Type="@device.Type"
                                           Status="@device.Status" />
                            }

                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ApplicationDbContext context = default!;
    private List<Device> Devices = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Devices = await context.Devices.ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
