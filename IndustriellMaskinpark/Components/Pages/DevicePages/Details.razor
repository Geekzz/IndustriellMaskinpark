@page "/devices/details"
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject IDbContextFactory<IndustriellMaskinpark.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1 class="text-center mb-4">Device Details</h1>

<div class="container">
    @if (device is null)
    {
        <div class="text-center">
            <p><em>Loading...</em></p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Device Information</h5>
            </div>
            <div class="card-body">
                <dl class="row mb-0">
                    <dt class="col-sm-3">Location</dt>
                    <dd class="col-sm-9">@device.Location</dd>

                    <dt class="col-sm-3">Last Updated</dt>
                    <dd class="col-sm-9">@device.LastUpdated.ToString("g")</dd>

                    <dt class="col-sm-3">Type</dt>
                    <dd class="col-sm-9">@device.Type</dd>

                    <dt class="col-sm-3">Status</dt>
                    <dd class="col-sm-9">@device.Status</dd>
                </dl>
            </div>
            <div class="card-footer text-end">
                <a href="@($"/devices/edit?id={device.Id}")" class="btn btn-warning me-2">Edit</a>
                <a href="/devices" class="btn btn-secondary">Back to List</a>
            </div>
        </div>
    }
</div>

@code {
    private Device? device;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        device = await context.Devices.FirstOrDefaultAsync(m => m.Id == Id);

        if (device is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
