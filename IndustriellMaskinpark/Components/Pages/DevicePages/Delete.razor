@page "/devices/delete"
@using IndustriellMaskinpark.Application.Interfaces
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IDeviceService DeviceService

<PageTitle>Delete</PageTitle>

<div class="container mt-5">
    <h1 class="text-center mb-4">Delete Device</h1>
    <div class="d-flex justify-content-center">
        <div class="card shadow-sm" style="width: 35rem;">
            <div class="card-header text-center bg-danger text-white">
                <h4>Confirm Deletion</h4>
            </div>
            <div class="card-body">
                @if (device is null)
                {
                    <div class="text-center">
                        <p><em>Loading...</em></p>
                    </div>
                }
                else
                {
                    <dl class="row mb-4">
                        <dt class="col-sm-4 text-end">Location:</dt>
                        <dd class="col-sm-8">@device.Location</dd>

                        <dt class="col-sm-4 text-end">Last Updated:</dt>
                        <dd class="col-sm-8">@device.LastUpdated</dd>

                        <dt class="col-sm-4 text-end">Type:</dt>
                        <dd class="col-sm-8">@device.Type</dd>

                        <dt class="col-sm-4 text-end">Status:</dt>
                        <dd class="col-sm-8">@device.Status</dd>
                    </dl>

                    <EditForm method="post" Model="device" OnValidSubmit="DeleteDevice" FormName="deleteDeviceForm">
                        <div class="text-center">
                            <button type="submit" class="btn btn-danger">Delete</button>
                            <a href="/devices" class="btn btn-secondary ms-3">Back to List</a>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Device? device;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Use DeviceService to fetch the device by ID
        device = await DeviceService.GetDeviceByIdAsync(Id);

        if (device is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task DeleteDevice()
    {
        if (device != null)
        {
            await DeviceService.DeleteDeviceAsync(device.Id); // Use DeviceService to delete the device
            NavigationManager.NavigateTo("/devices");
        }
    }
}
