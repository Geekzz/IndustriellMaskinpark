@page "/devices/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<IndustriellMaskinpark.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Device</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (Device == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="Device" OnValidSubmit="UpdateDevice" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputText id="location" @bind-Value="Device.Location" class="form-control" />
                    <ValidationMessage For="() => Device.Location" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastupdated" class="form-label">Last Updated:</label>
                    <InputDate id="lastupdated" @bind-Value="Device.LastUpdated" class="form-control" />
                    <ValidationMessage For="() => Device.LastUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputSelect id="type" @bind-Value="Device.Type" class="form-control">
                        @foreach (var type in Enum.GetValues<DeviceType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Device.Status" class="form-control">
                        @foreach (var status in Enum.GetValues<DeviceStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.Status" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>

        }
    </div>
</div>

<div>
    <a href="/devices">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    private Device? Device { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Device = await context.Devices.FirstOrDefaultAsync(d => d.Id == Id);

        if (Device == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task UpdateDevice()
    {
        using var context = DbFactory.CreateDbContext();
        context.Devices.Update(Device!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/devices");
    }
}
