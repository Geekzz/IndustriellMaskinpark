@page "/devices/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<IndustriellMaskinpark.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit Device</h1>
<hr />

@if (Device is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Device" OnValidSubmit="UpdateDevice">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Device.Id" value="@Device.Id" />

                <!-- Location Field -->
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputText id="location" @bind-Value="Device.Location" class="form-control" />
                    <ValidationMessage For="() => Device.Location" class="text-danger" />
                </div>

                <!-- LastUpdated Field -->
                <div class="mb-3">
                    <label for="lastupdated" class="form-label">Last Updated:</label>
                    <InputDate id="lastupdated" @bind-Value="Device.LastUpdated" class="form-control" />
                    <ValidationMessage For="() => Device.LastUpdated" class="text-danger" />
                </div>

                <!-- Type Field -->
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputSelect id="type" @bind-Value="Device.Type" class="form-control">
                        @foreach (var type in Enum.GetValues<DeviceType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.Type" class="text-danger" />
                </div>

                <!-- Status Field -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Device.Status" class="form-control">
                        @foreach (var status in Enum.GetValues<DeviceStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.Status" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/devices">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private Device? Device { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Device = await context.Devices.FirstOrDefaultAsync(d => d.Id == Id);

        if (Device == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task UpdateDevice()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Device!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DeviceExists(Device!.Id))
            {
                NavigationManager.NavigateTo("/notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/devices");
    }

    private bool DeviceExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Devices.Any(e => e.Id == id);
    }
}
